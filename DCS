#!/usr/bin/python3
from importlib import import_module
from re import search, match, findall
from sys import argv
def startswith_lpadded(value: str, key: str, count: int, padding: str = '~'):
	return value.startswith((padding * count) + key)
def get_lpadding(value: str, padding: str = '~'):
	count: int = 0
	for c in value:
		if(c == padding):
			count += 1
		else:
			return count
def dict_value_key(value: object, values: dict):
	for key in values:
		if(values[key] == value):
			return key
	return None
def dict_next(key: object, values: dict):
	f: bool = 0
	for k in values:
		if(k == key):
			f = True
			continue
		if(f):
			return k
	return None
def replace_dict(expr: str, replace: str, values: dict):
	for key in values:
		values[key] = values[key].replace(expr, replace)
	return values
def regex_replace_dict(expr: str, replace: str, values: dict):
	for key in values:
		found = search(expr, values[key])
		if(found):
			values[key] = values[key].replace(found.group(), replace)
	return values
def regex_remove_keys_dict(expr: str, values: dict):
	loc: dict = values.copy()
	for key in loc:
		if(search(expr, values[key])):
			values.pop(key)
	return values
def regex_subdict(expr: str, values: dict):
	ret: dict = {}
	for key in values:
		found = search(expr, values[key])
		if(found):
			ret[key] = values[key]
	return ret
parser_indent: int = 1
command_parser_input: dict = {}
file: str = open(argv[1], 'r').read()
for include in findall("\\@include\\s*.*", file):
	file = file.replace(include, open(include.replace("@include ", '') + ".dcs", 'r').read())
for imp in findall("\\@import\\s*.*", file):
	module = import_module(imp.replace("@import ", '')).__dict__
	module_dict = module
	imports = [name for name in module_dict if not name.startswith('_')]
	globals().update({name: module_dict[name] for name in imports})
lines: list = file.split('\n')
for line in lines:
	command_parser_input[lines.index(line)] = line
mathematical_expressions: list = { '==', '<', '>', '=', '\\+', '\\-', '\\*', '/' }
command_parser_input = replace_dict('\t', '~', command_parser_input)
command_parser_input = replace_dict(' ' * 4, '~', command_parser_input)
command_parser_input = regex_remove_keys_dict('^#.*$', command_parser_input) 
command_parser_input = regex_remove_keys_dict('^$', command_parser_input)
command_parser_input = regex_remove_keys_dict('^~*$', command_parser_input)
for expr in mathematical_expressions:
	command_parser_input = regex_replace_dict('(\\s*)?' + expr + '(\\s*)?', expr.replace('\\', ''), command_parser_input)
command_labels: dict = regex_subdict('^\\S*:\\s*$', command_parser_input)
command_labels = replace_dict(':', '', command_labels)
variable_map: dict = {}
def parse(message):
	global parser_indent
	message_sub: list = message.split(' ')
	command: str = message.split(' ')[0]
	if command in command_labels.values():
		command_ln: int = dict_value_key(command, command_labels)
		i: int = 0
		while i < len(command_parser_input):
			line: int = list(command_parser_input.keys())[i]
			if(not (line > command_ln)):
				i += 1
				continue
			if(dict_next(command_ln, command_labels) and (line >= dict_next(command_ln, command_labels) or line > max(command_parser_input.keys()))):
				return
			statement: str = command_parser_input[line]
			if(search('^~*go-', statement)):
				statement = statement.replace('go', 'go ', 1)
			statement = statement.replace("%ARGSV", ' '.join(message_sub[1:]))
			arg_vars: list = findall('%ARG_[0-9]', statement)
			for arg in arg_vars:
				if(len(message_sub) > int(arg.split('_')[1]) + 1):
					statement = statement.replace("%ARG_" + str(arg_vars.index(arg)), message_sub[int(arg.split('_')[1]) + 1])
			var_labels: list = findall('%.*=[^=]*', statement)
			if(var_labels):
				for var in var_labels:
					var_sub: list = var.split('=')
					for key in variable_map:
						var_sub[1] = var_sub[1].replace('%', '').replace(key, str(variable_map[key]))
					try:
						variable_map[var_sub[0].lstrip('%')] = eval(var_sub[1])
					except:
						variable_map[var_sub[0].lstrip('%')] = var_sub[1]
				i += 1
				continue
			for key in variable_map:
				statement = statement.replace('%' + key, str(variable_map[key]))
			numcond_vars = findall('[0-9]*[>,<][0-9]*', statement)
			for cond in numcond_vars:
				statement = statement.replace(cond, str(eval(cond)).upper())
			statement_sub: str = statement.split(' ', 1)
			exc: str = statement_sub[0].upper()
			if(get_lpadding(statement) < parser_indent):
				parser_indent = get_lpadding(statement)
			if(startswith_lpadded(statement.upper(), "IF TRUE", parser_indent)):
				parser_indent += 1
				i += 1
				continue
			if(startswith_lpadded(statement.upper(), "CALL", parser_indent)):
				old_indent = parser_indent
				parse(statement_sub[1])
				parser_indent = old_indent
				i += 1
				continue
			if(startswith_lpadded(statement.upper(), "PYVAL", parser_indent)):
				eval(statement_sub[1])
				i += 1
				continue
			if(startswith_lpadded(exc, "GO", parser_indent)):
				i += int(statement_sub[1])
				continue
			i += 1
parse("main " + ' '.join(argv[2:]))
